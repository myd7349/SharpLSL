<Project>

  <PropertyGroup>
    <PackageId>SharpLSL.Native.$(RID)</PackageId>
    <Description>liblsl native library for $(RID).</Description>
    <IsUmbrellaPackage>false</IsUmbrellaPackage>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackageId)' == 'SharpLSL.Native.all'">
    <Description>liblsl native library for all supported platforms.</Description>
    <IsUmbrellaPackage>true</IsUmbrellaPackage>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsUmbrellaPackage)' == 'false'">
    <NativeAssetTitle>liblsl-v$(LSLTagVersion)-$(RID)-dynamic</NativeAssetTitle>
    <NativeAssetArchive>$(NativeAssetTitle).zip</NativeAssetArchive>
    <NativeAssetUrl>https://github.com/myd7349/liblsl-ci-build/releases/download/$(LSLBuildCITagVersion)/$(NativeAssetArchive)</NativeAssetUrl>
    <NativeLibFile>$(NativeLibPrefix)lsl.$(NativeLibExt)</NativeLibFile>
    <NativeLibUnpackDir>$(ProjectDir)$(BaseIntermediateOutputPath)$(NativeAssetTitle)/</NativeLibUnpackDir>
  </PropertyGroup>

  <Target Name="_DownloadNativeAsset"
          BeforeTargets="_UnpackNativeAsset"
          Condition="'$(IsUmbrellaPackage)' == 'false'">
    <DownloadFile SourceUrl="$(NativeAssetUrl)"
                  DestinationFolder="$(ProjectDir)$(BaseIntermediateOutputPath)"
                  DestinationFileName="$(NativeAssetArchive)"
                  Condition="!Exists('$(ProjectDir)$(BaseIntermediateOutputPath)$(NativeAssetArchive)')" />
  </Target>

  <Target Name="_UnpackNativeAsset"
          BeforeTargets="_CollectNativeLibs"
          Condition="'$(IsUmbrellaPackage)' == 'false'">
    <Unzip SourceFiles="$(ProjectDir)$(BaseIntermediateOutputPath)$(NativeAssetArchive)"
           DestinationFolder="$(NativeLibUnpackDir)"
           OverwriteReadOnlyFiles="true"
           Condition="!Exists('$(NativeLibUnpackDir)$(NativeLibBaseDir)/$(NativeLibFile)')"  />
  </Target>

  <Target Name="_CollectNativeLibs"
          BeforeTargets="Build"
          Condition="'$(IsUmbrellaPackage)' == 'false'">
    <ItemGroup>
      <NativeLibs Include="$(NativeLibUnpackDir)$(NativeLibBaseDir)/**/$(NativeLibFile)" />
      <NativePdbs Include="$(NativeLibUnpackDir)$(NativeLibBaseDir)/**/*.$(DebugSymbolExt)"
                  Condition="$(DebugSymbolExt) != ''" />
      <None Include="@(NativeLibs);@(NativePdbs)">
        <Pack>true</Pack>
        <PackagePath>runtimes/$(RID)/native</PackagePath>
        <Link>runtimes/$(RID)/native/%(FileName)%(Extension)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>
  </Target>

  <Target Name="_IncludeAdditionalTfmSpecificPackageFilesPrepare">
    <GetNuGetShortFolderName TargetFrameworkMoniker="$(TargetFrameworkMoniker)" TargetPlatformMoniker="$(TargetPlatformMoniker)">
      <Output TaskParameter="NuGetShortFolderName" PropertyName="NuGetShortFolderName" />
    </GetNuGetShortFolderName>
  </Target>

  <Target Name="_IncludePlaceholders" AfterTargets="_IncludeAdditionalTfmSpecificPackageFilesPrepare">
    <Touch Files="$(IntermediateOutputPath)_._" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)_._" />
      <TfmSpecificPackageFile Include="$(IntermediateOutputPath)_._"
                              PackagePath="lib\$(NuGetShortFolderName)\_._" />
    </ItemGroup>
  </Target>

  <Target Name="_IncludeAdditionalTfmSpecificPackageFiles">
    <ItemGroup Condition="'$(TargetFramework)' == 'net35'">
      <TfmSpecificPackageFile Include="$(ProjectDir)build\net35\$(PackageId).targets"
                              PackagePath="build\net35\$(PackageId).targets" />
      <TfmSpecificPackageFile Include="$(ProjectDir)build\net35\$(PackageId).targets"
                              PackagePath="buildTransitive\net35\$(PackageId).targets" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <_IncludeAdditionalTfmSpecificPackageFilesDependsOn>
      _IncludeAdditionalTfmSpecificPackageFilesPrepare;
      _IncludeAdditionalTfmSpecificPackageFiles;
    </_IncludeAdditionalTfmSpecificPackageFilesDependsOn>
  </PropertyGroup>

  <Target Name="IncludeAdditionalTfmSpecificPackageFiles"
          DependsOnTargets="$(_IncludeAdditionalTfmSpecificPackageFilesDependsOn)" />

</Project>
