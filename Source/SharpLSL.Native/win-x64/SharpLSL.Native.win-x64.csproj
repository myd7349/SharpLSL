<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <RID>win-x64</RID>
    <LSLAssetArchive>liblsl-v$(LSLTagVersion)-$(RID)-dynamic.zip</LSLAssetArchive>
    <LSLAssetFile>lsl.dll</LSLAssetFile>
    <LSLAssetUrl>https://github.com/myd7349/liblsl-ci-build/releases/download/$(LSLBuildCITagVersion)/$(LSLAssetArchive)</LSLAssetUrl>
  </PropertyGroup>

  <PropertyGroup>
    <PackageId>SharpLSL.Native.$(RID)</PackageId>
    <Description>liblsl native assets for $(RID).</Description>
    <SuppressDependenciesWhenPacking>false</SuppressDependenciesWhenPacking>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_IncludeAdditionalTfmSpecificPackageFiles</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <ItemGroup>
    <NativeLibs Include="$(ProjectDir)$(BaseIntermediateOutputPath)bin/**/*.dll" />
    <NativePdbs Include="$(ProjectDir)$(BaseIntermediateOutputPath)bin/**/*.pdb" />
    <None Include="@(NativeLibs);@(NativePdbs)">
      <Pack>true</Pack>
      <PackagePath>runtimes/$(RID)/native</PackagePath>
      <Link>runtimes/$(RID)/native/%(FileName)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <Target Name="DownloadNativeAssets" BeforeTargets="UnzipNativeAssets">
    <DownloadFile SourceUrl="$(LSLAssetUrl)"
                  DestinationFolder="$(ProjectDir)$(BaseIntermediateOutputPath)"
                  DestinationFileName="$(LSLAssetArchive)"
                  Condition="!Exists('$(ProjectDir)$(BaseIntermediateOutputPath)$(LSLAssetArchive)')" />
  </Target>

  <Target Name="UnzipNativeAssets" BeforeTargets="Build">
    <Unzip SourceFiles="$(ProjectDir)$(BaseIntermediateOutputPath)$(LSLAssetArchive)"
           DestinationFolder="$(ProjectDir)$(BaseIntermediateOutputPath)"
           ContinueOnError="true"
           OverwriteReadOnlyFiles="true"
           Condition="!Exists('$(ProjectDir)$(BaseIntermediateOutputPath)bin/$(LSLAssetFile)')" />
  </Target>

  <Target Name="_IncludePlaceholders" AfterTargets="_IncludeAdditionalTfmSpecificPackageFilesPrepare">
    <Touch Files="$(IntermediateOutputPath)_._" AlwaysCreate="True" />
    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)_._" />
      <TfmSpecificPackageFile Include="$(IntermediateOutputPath)_._"
                              PackagePath="lib\$(NuGetShortFolderName)\_._" />
    </ItemGroup>
  </Target>

  <Target Name="_IncludeAdditionalTfmSpecificPackageFilesPrepare">
    <GetNuGetShortFolderName TargetFrameworkMoniker="$(TargetFrameworkMoniker)" TargetPlatformMoniker="$(TargetPlatformMoniker)">
      <Output TaskParameter="NuGetShortFolderName" PropertyName="NuGetShortFolderName" />
    </GetNuGetShortFolderName>
  </Target>

  <PropertyGroup>
    <_IncludeAdditionalTfmSpecificPackageFilesDependsOn>
      _IncludeAdditionalTfmSpecificPackageFilesPrepare;
      IncludeAdditionalTfmSpecificPackageFiles;
    </_IncludeAdditionalTfmSpecificPackageFilesDependsOn>
  </PropertyGroup>

  <Target Name="_IncludeAdditionalTfmSpecificPackageFiles"
          DependsOnTargets="$(_IncludeAdditionalTfmSpecificPackageFilesDependsOn)" />

  <Target Name="IncludeAdditionalTfmSpecificPackageFiles">
    <ItemGroup Condition=" '$(TargetFramework)' == 'net35' ">
      <TfmSpecificPackageFile Include="$(MSBuildThisFileDirectory)build\net35\$(PackageId).targets"
                              PackagePath="build\net35\$(PackageId).targets" />
      <TfmSpecificPackageFile Include="$(MSBuildThisFileDirectory)build\net35\$(PackageId).targets"
                              PackagePath="buildTransitive\net35\$(PackageId).targets" />
    </ItemGroup>
  </Target>
</Project>
